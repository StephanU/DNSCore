/*
  DA-NRW Software Suite | ContentBroker
  Copyright (C) 2013 Historisch-Kulturwissenschaftliche Informationsverarbeitung
  Universität zu Köln

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package de.uzk.hki.da.cb;

import java.io.IOException;
import java.io.InputStream;
import java.util.Set;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.NotImplementedException;

import de.uzk.hki.da.action.AbstractAction;
import de.uzk.hki.da.core.C;
import de.uzk.hki.da.core.ConfigurationException;
import de.uzk.hki.da.repository.RepositoryException;
import de.uzk.hki.da.repository.RepositoryFacade;

/**
 * Action that indexes metadata into a search index.
 * 
 * It fetches (RDF-)Metadata from the repository,
 * transforms it to hierarchical obejct structure
 * and indexes it in the repository's index. 
 * 
 * The index entries generated by this action can be
 * configured through <a href="http://json-ld.org/spec/latest/json-ld-framing/">
 * JSON-LD Frames</a>.
 * 
 * The context URI for every document is generated
 * by concatenating the context uri prefix with the
 * name of the frame file.
 * 
 * @author Sebastian Cuy 
 * @author Daniel M. de Oliveira
 */
public class IndexMetadataAction extends AbstractAction {
	
	private RepositoryFacade repositoryFacade;
	private Set<String> testContractors;
	private String indexName;
	
	@Override
	public void checkActionSpecificConfiguration() throws ConfigurationException {
		if (getRepositoryFacade() == null) 
			throw new ConfigurationException("Repository facade object not set. Make sure the action is configured properly");
	}

	@Override
	public void checkSystemStatePreconditions() throws IllegalStateException {
		if (indexName == null) 
			throw new IllegalStateException("Index name not set. Make sure the action is configured properly");
		if (getTestContractors()==null)
			throw new IllegalStateException("testContractors not set");
	}

	@Override
	public boolean implementation() throws RepositoryException, IOException {
		setKILLATEXIT(true);
	
		InputStream metadataStream;
		metadataStream = getRepositoryFacade().retrieveFile(
			object.getIdentifier(), 
			preservationSystem.getOpenCollectionName(), C.EDM_METADATA_STREAM_ID);
		if (metadataStream == null) {
			logger.warn("Metadata file {} not found in repository! Skipping indexing.", C.EDM_METADATA_STREAM_ID);
			return true;
		}
		String edmContent = IOUtils.toString(metadataStream, "UTF-8");
		logger.debug("will index metadata in "+adjustIndexName(indexName));
		getRepositoryFacade().indexMetadata(adjustIndexName(indexName), object.getIdentifier(), edmContent);		
		
		return true;
	}

	

	
	@Override
	public void rollback() throws Exception {
		throw new NotImplementedException();
	}




	/**
	 * use test index for test packages
	 * @param originalIndexName
	 * @return
	 */
	private String adjustIndexName(String originalIndexName){
		
		String contractorShortName = object.getContractor().getShort_name();
		String adjustedIndexName = indexName;
		if(testContractors != null && testContractors.contains(contractorShortName)) {
			adjustedIndexName += "_test";
		}
		return adjustedIndexName;
	}

	
	/**
	 * Get the name of the index
	 * the data will be indexed in.
//	 * @return the index name
	 */
	public String getIndexName() {
		return indexName;
	}

	/**
	 * Set the name of the index
	 * the data will be indexed in.
	 * @param the index name
	 */
	public void setIndexName(String indexName) {
		this.indexName = indexName;
	}

	/**
	 * Get the set of contractors that are considered test users.
	 * Objects ingested by these users will be indexed in the
	 * test index (index_name + "test").
	 * @return the set of test users
	 */
	public Set<String> getTestContractors() {
		return testContractors;
	}

	/**
	 * Set the set of contractors that are considered test users.
	 * Objects ingested by these users will be indexed in the
	 * test index (index_name + "test").
	 * @param the set of test users
	 */
	public void setTestContractors(Set<String> testContractors) {
		this.testContractors = testContractors;
	}


	/**
	 * Get the repository implementation
	 * @return the repository implementation
	 */
	public RepositoryFacade getRepositoryFacade() {
		return repositoryFacade;
	}
	
	/**
	 * Set the repository implementation
	 * @param repositoryFacade the repository implementation
	 */
	public void setRepositoryFacade(RepositoryFacade repositoryFacade) {
		this.repositoryFacade = repositoryFacade;
	}

}
